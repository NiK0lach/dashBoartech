// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}



model Coupon{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  couponCode String
  expiryDate DateTime
  isActive Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title String
  link String
  imageUrl String
  isActive Boolean

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String 
  slug       String @unique
  imageUrl  String?
  description String?   
  isActive Boolean

  products  Product[]
  trainings  Training[]    

  storeIds String[] @db.ObjectId
  Stores   Store[]   @relation(fields: [storeIds], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Store {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  storeTitle       String    
  slug       String @unique
  description String? 
  logoUrl String?
  storePhone String?
  storeEmail String?
  storeAdress String?
  contactName String?
  contactPhone String?
  terms String?
  notes String?
  link String?
  isActive Boolean
  
  categoryIds String[]   @db.ObjectId
  categories  Category[] @relation(fields: [categoryIds], references: [id])

  createdAt   DateTime   @default(now())
  updatedAt   DateTime?  @updatedAt
}

model Product {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title    String    @unique
  slug     String    @unique
  sku      String?
  barcode  String?
  productPrice String
  salePrice   String
  description  String
  imageUrl  String
  tags      String[]
  isActive  Boolean

  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId

  user   User @relation(fields: [userId], references: [id])
  userId String  @unique 

  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Training{
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  title  String?
  slug   String @unique
  description  String
  content   String?
  imageUrl  String
  isActive  Boolean

  category   Category  @relation(fields: [categoryId], references: [id])
  categoryId String @db.ObjectId
}

enum UserRole {
  ADMIN
  USER
  SUPPLIER
  MODERATOR
}

model User {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?


  products Product[]

  role          UserRole @default(USER)
  
  supplierProfile SupplierProfile?

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model SupplierProfile {
    id       String    @id @default(auto()) @map("_id") @db.ObjectId
    name     String    @unique
    phone    Float
    profileImageUrl String
    email    String
    adress   String
    contact  String
    contactphone   Float
    paymenterms    String?
    notes          String?
    supplierCode   String
    isActive      Boolean

    user   User @relation(fields: [userId], references: [id])
    userId String @db.ObjectId @unique 

    createdAt  DateTime  @default(now())
    updatedAt  DateTime? @updatedAt
}

